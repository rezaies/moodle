{"version":3,"sources":["../src/gateways_modal.js"],"names":["registerEventListenersBySelector","nodeSelector","document","querySelectorAll","forEach","element","registerEventListeners","rootNode","addEventListener","e","preventDefault","show","focusOnClose","target","ModalFactory","ModalGateways","TYPE","Templates","render","type","title","body","create","modal","rootElement","getRoot","on","ModalEvents","hidden","destroy","focus","PaymentEvents","proceed","gateway","querySelector","Selectors","values","value","processPayment","parseFloat","dataset","amount","currency","surcharge","parseInt","component","componentid","description","success","message","hide","Notification","addNotification","location","reload","alert","then","matches","elements","gateways","updateCostRegion","accountid","context","renderForPromise","html","js","replaceNodeContents","regions","gatewaysContainer","selectSingleGateway","root","length","checked","locale","localisedCost","toLocaleString","style","fee","costContainer","callback","paymentMethod","process"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for the gateways modal.\n *\n * @module     core_payment/gateways_modal\n * @package    core_payment\n * @copyright  2019 Shamim Rezaie <shamim@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport {getGatewaysSupportingCurrency} from './repository';\nimport Selectors from './selectors';\nimport ModalEvents from 'core/modal_events';\nimport PaymentEvents from 'core_payment/events';\nimport {add as addToast, addToastRegion} from 'core/toast';\nimport Notification from 'core/notification';\nimport ModalGateways from './modal_gateways';\n\n/**\n * Register event listeners for the module.\n *\n * @param {string} nodeSelector The root to listen to.\n */\nexport const registerEventListenersBySelector = (nodeSelector) => {\n    document.querySelectorAll(nodeSelector).forEach((element) => {\n        registerEventListeners(element);\n    });\n};\n\n/**\n * Register event listeners for the module.\n *\n * @param {HTMLElement} rootNode The root to listen to.\n */\nexport const registerEventListeners = (rootNode) => {\n    rootNode.addEventListener('click', (e) => {\n        e.preventDefault();\n        show(rootNode, {focusOnClose: e.target});\n    });\n};\n\n/**\n * Shows the gateway selector modal.\n *\n * @param {HTMLElement} rootNode\n * @param {Object} options - Additional options\n * @param {HTMLElement} options.focusOnClose The element to focus on when the modal is closed.\n */\nconst show = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const modal = await ModalFactory.create({\n        type: ModalGateways.TYPE,\n        title: await getString('selectpaymenttype', 'core_payment'),\n        body: await Templates.render('core_payment/gateways_modal', {}),\n    });\n\n    const rootElement = modal.getRoot()[0];\n    addToastRegion(rootElement);\n\n    modal.show();\n\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        // Destroy when hidden.\n        modal.destroy();\n        try {\n            focusOnClose.focus();\n        } catch (e) {\n            // eslint-disable-line\n        }\n    });\n\n    modal.getRoot().on(PaymentEvents.proceed, (e) => {\n        const gateway = (rootElement.querySelector(Selectors.values.gateway) || {value: ''}).value;\n\n        if (gateway) {\n            processPayment(\n                gateway,\n                {\n                    value: parseFloat(rootNode.dataset.amount),\n                    currency: rootNode.dataset.currency,\n                    surcharge: parseInt((rootElement.querySelector(Selectors.values.gateway) || {dataset: {surcharge: 0}})\n                        .dataset.surcharge),\n                },\n                rootNode.dataset.component,\n                rootNode.dataset.componentid,\n                rootNode.dataset.description,\n                ({success, message = ''}) => {\n                    modal.hide();\n                    if (success) {\n                        Notification.addNotification({\n                            message: message,\n                            type: 'success',\n                        });\n                        location.reload();\n                    } else {\n                        Notification.alert('', message);\n                    }\n                },\n            );\n        } else {\n            // We cannot use await in the following line.\n            // The reason is that we are preventing the default action of the save event being triggered,\n            // therefore we cannot define the event handler function asynchronous.\n            getString('nogatewayselected', 'core_payment').then(message => addToast(message));\n        }\n\n        e.preventDefault();\n    });\n\n    // Re-calculate the cost when gateway is changed.\n    rootElement.addEventListener('change', e => {\n        if (e.target.matches(Selectors.elements.gateways)) {\n            updateCostRegion(rootElement, parseFloat(rootNode.dataset.amount), rootNode.dataset.currency);\n        }\n    });\n\n    const currency = rootNode.dataset.currency;\n    const accountid = rootNode.dataset.accountid;\n    const gateways = await getGatewaysSupportingCurrency(currency, accountid);\n    const context = {\n        gateways\n    };\n\n    const {html, js} = await Templates.renderForPromise('core_payment/gateways', context);\n    Templates.replaceNodeContents(rootElement.querySelector(Selectors.regions.gatewaysContainer), html, js);\n    selectSingleGateway(rootElement);\n    await updateCostRegion(rootElement, parseFloat(rootNode.dataset.amount), rootNode.dataset.currency);\n};\n\n/**\n * Auto-select the gateway if there is only one gateway.\n *\n * @param {HTMLElement} root An HTMLElement that contains the cost region\n */\nconst selectSingleGateway = root => {\n    const gateways = root.querySelectorAll(Selectors.elements.gateways);\n\n    if (gateways.length == 1) {\n        gateways[0].checked = true;\n    }\n};\n\n/**\n * Shows the cost of the item the user is purchasing in the cost region.\n *\n * @param {HTMLElement} root An HTMLElement that contains the cost region\n * @param {number} amount The amount part of cost\n * @param {string} currency The currency part of cost in the 3-letter ISO-4217 format\n * @returns {Promise<void>}\n */\nconst updateCostRegion = async(root, amount, currency) => {\n    const locale = await updateCostRegion.locale; // This only takes a bit the first time.\n    const surcharge = parseInt((root.querySelector(Selectors.values.gateway) || {dataset: {surcharge: 0}}).dataset.surcharge);\n    amount += amount * surcharge / 100;\n    const localisedCost = amount.toLocaleString(locale, {style: \"currency\", currency: currency});\n\n    const {html, js} = await Templates.renderForPromise('core_payment/fee_breakdown', {fee: localisedCost, surcharge});\n    Templates.replaceNodeContents(root.querySelector(Selectors.regions.costContainer), html, js);\n};\nupdateCostRegion.locale = getString(\"localecldr\", \"langconfig\");\n\n/**\n * Process payment using the selected gateway.\n *\n * @param {string} gateway The gateway to be used for payment\n * @param {Object} amount - Amount of payment\n * @param {number} amount.value The numerical part of the amount\n * @param {string} amount.currency The currency part of the amount in the three-character ISO-4217 format\n * @param {number} amount.surcharge The surcharge percentage that should be added to the amount\n * @param {string} component Name of the component that the componentid belongs to\n * @param {number} componentid An internal identifier that is used by the component\n * @param {string} description Description of the payment\n * @param {processPaymentCallback} callback The callback function to call when processing is finished\n * @returns {Promise<void>}\n */\nconst processPayment = async(gateway, {value, currency, surcharge = 0}, component, componentid, description, callback) => {\n    const paymentMethod = await import(`pg_${gateway}/gateways_modal`);\n\n    value += value * surcharge / 100;\n    paymentMethod.process(value, currency, component, componentid, description, callback);\n};\n\n/**\n * The callback definition for processPayment.\n *\n * @callback processPaymentCallback\n * @param {bool} success\n * @param {string} message\n */\n"],"file":"gateways_modal.min.js"}