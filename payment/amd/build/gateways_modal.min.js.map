{"version":3,"sources":["../src/gateways_modal.js"],"names":["registerEventListeners","nodeSelector","rootNode","document","querySelector","addEventListener","e","preventDefault","show","focusOnClose","target","Templates","render","done","content","ModalFactory","create","type","types","SAVE_CANCEL","title","body","modal","getRoot","currency","dataset","gateways","context","gateway","push","html","js","replaceNodeContents","find","Selectors","regions","gatewaysContainer","on","ModalEvents","hidden","destroy","focus","save","root","values","value","processPayment","amount","component","componentid","description","then","message","rootElement","paymentMethod","process"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for the gateways modal.\n *\n * @module     core_payment/gateways_modal\n * @package    core_payment\n * @copyright  2019 Shamim Rezaie <shamim@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport {getGatewaysSupportingCurrency} from 'core_payment/repository';\nimport Selectors from './selectors';\nimport * as ModalEvents from 'core/modal_events';\nimport {add as addToast, addToastRegion} from 'core/toast';\n\n/**\n * Register event listeners for the module.\n *\n * @param {string} nodeSelector The root to listen to.\n */\nexport const registerEventListeners = (nodeSelector) => {\n    const rootNode = document.querySelector(nodeSelector);\n\n    rootNode.addEventListener('click', (e) => {\n        e.preventDefault();\n        show(rootNode, {focusOnClose: e.target});\n    });\n};\n\n/**\n * Shows the gateway selector modal.\n *\n * @param {HTMLElement} rootNode\n * @param {Object} options - Additional options\n * @param {HTMLElement} options.focusOnClose The element to focus on when the modal is closed.\n */\nconst show = (rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    Templates.render('core_payment/gateways_modal', {})\n    .done(content => {\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: getString('selectpaymenttype', 'core_payment'),\n            body: content,\n        })\n        .done(function(modal) {\n            addToastRegion(modal.getRoot()[0]);\n            const currency = rootNode.dataset.currency;\n            getGatewaysSupportingCurrency(currency)\n            .done(gateways => {\n                const context = {\n                    gateways: []\n                };\n\n                for (let gateway of gateways) {\n                    context.gateways.push(gateway);\n                }\n\n                Templates.render('core_payment/gateways', context)\n                    .done((html, js) => {\n                        Templates.replaceNodeContents(modal.getRoot().find(Selectors.regions.gatewaysContainer),\n                            html, js);\n                    });\n            });\n\n            modal.getRoot().on(ModalEvents.hidden, function() {\n                // Destroy when hidden.\n                modal.destroy();\n                try {\n                    focusOnClose.focus();\n                } catch (e) {\n                    // eslint-disable-line\n                }\n            });\n\n            modal.getRoot().on(ModalEvents.save, function(e) {\n                const root = modal.getRoot()[0];\n                const gateway = (root.querySelector(Selectors.values.gateway) || {value: ''}).value;\n\n                        if (gateway) {\n                            processPayment(\n                                root,\n                                gateway,\n                                rootNode.dataset.amount,\n                                rootNode.dataset.currency,\n                                rootNode.dataset.component,\n                                rootNode.dataset.componentid,\n                                rootNode.dataset.description,\n                            );\n                        } else {\n                            getString('nogatewayselected', 'core_payment').then(message => {\n                                return addToast(message);\n                            });\n                        }\n\n                e.preventDefault();\n            });\n\n            modal.show();\n        });\n    });\n};\n\n/**\n * Process payment using the selected gateway.\n *\n * @param {HTMLElement} rootElement The root element of the main modal\n * @param {string} gateway The gateway to be used for payment\n * @param {number} amount Amount of payment\n * @param {string} currency The currency in the three-character ISO-4217 format\n * @param {string} component Name of the component that the componentid belongs to\n * @param {number} componentid An internal identifier that is used by the component\n * @param {string} description Description of the payment\n * @returns {Promise<void>}\n */\nconst processPayment = async(rootElement, gateway, amount, currency, component, componentid, description) => {\n    const paymentMethod = await import(`pg_${gateway}/gateways_modal`);\n\n    paymentMethod.process(rootElement, amount, currency, component, componentid, description);\n};\n"],"file":"gateways_modal.min.js"}